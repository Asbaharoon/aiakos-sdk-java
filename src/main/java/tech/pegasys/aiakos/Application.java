/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tech.pegasys.aiakos;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.utils.Convert;
import tech.pegasys.aiakos.contract.Aiakos;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.concurrent.ThreadLocalRandom;

public class Application {
  private static final Logger log = LoggerFactory.getLogger(Application.class);

  private static final BigInteger REQUIRED_NUMBER_OF_MAINTAINERS = new BigInteger("2", 10);

  public static void main(String[] args) throws Exception {
    new Application().run();
  }

  private void run() throws Exception {
    final BigInteger weiAmount =
        Convert.toWei(BigDecimal.valueOf(0.1), Convert.Unit.ETHER).toBigInteger();
    final Web3j web3j =
        Web3j.build(
            new HttpService("http://localhost:8545/")); // FIXME: Enter your Infura token here;
    log.info(
        "Connected to Ethereum client version: "
            + web3j.web3ClientVersion().send().getWeb3ClientVersion());

    final String maintainer1Address = "0xa00b1a651e6123d55a59d043c63f720414fd1d08";
    final String maintainer2Address = "0xf88858b8246b4c41223354db2caca84109824f86";
    final Credentials ownerCredentials =
        Credentials.create("0x5f32b2d51813403414c89b0f582d5e1eab560f67803201c993c16af1e462eaae");
    final Credentials maintainer1Credentials =
        Credentials.create("0xefa263a31bd0c9420caafe4be3feb9e0c663584e6edb02bf0f723e7830a77a6f");
    final Credentials maintainer2Credentials =
        Credentials.create("0x927a407efb0aa2c48dc9f152f64db22b2e7fe50235471d0745f34850ab8059ff");

    log.info("Contract owner credentials loaded");
    final ContractGasProvider contractGasProvider = new DefaultGasProvider();
    Aiakos ownerContract =
        Aiakos.deploy(web3j, ownerCredentials, contractGasProvider, REQUIRED_NUMBER_OF_MAINTAINERS)
            .send();
    log.info("Aiakos ownerContract deployed at: {}", ownerContract.getContractAddress());
    Boolean amIMaintainer = ownerContract.amIMaintainer().send();
    log.info("Owner is maintainer: {}", amIMaintainer);
    ownerContract.addMaintainer(maintainer1Address, weiAmount).send();

    final String releaseVersion = "1.0.0";
    final byte[] releaseHash = new byte[32];
    ThreadLocalRandom.current().nextBytes(releaseHash);
    Aiakos maintainer1AiakosContract =
        Aiakos.load(
            ownerContract.getContractAddress(), web3j, maintainer1Credentials, contractGasProvider);
    maintainer1AiakosContract.deployRelease(releaseVersion, releaseHash, weiAmount).send();
    Boolean isMaintainer1Maintainer = maintainer1AiakosContract.amIMaintainer().send();
    log.info("Maintainer 1 is maintainer: {}", isMaintainer1Maintainer);
  }
}

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tech.pegasys.aiakos;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import tech.pegasys.aiakos.config.AiakosConfiguration;
import tech.pegasys.aiakos.domain.Release;
import tech.pegasys.aiakos.domain.ReleaseInfo;
import tech.pegasys.aiakos.roles.AiakosMaintainer;
import tech.pegasys.aiakos.roles.AiakosOwner;

import java.math.BigInteger;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Application {
  private static final Logger log = LoggerFactory.getLogger(Application.class);

  private static final BigInteger REQUIRED_NUMBER_OF_MAINTAINERS = new BigInteger("2", 10);

  public static void main(String[] args) throws Exception {
    final int requiredNumberOfMaintainers = 2;
    // Declare the owner of the Aiakos contract.
    final AiakosOwner owner =
        AiakosOwner.of(
            AiakosConfiguration.builder()
                .accountAddress("0xfd12370ac2210964b92695f08ad7a84516c77eeb")
                .privateKey("0x5f32b2d51813403414c89b0f582d5e1eab560f67803201c993c16af1e462eaae")
                .build(),
            requiredNumberOfMaintainers);
    final String pantheonVersion = "1.0.0";
    final Path pantheonReleasePath = Paths.get("/opt/bin/pantheon/pantheon-1.0.0.tar.gz");
    // Build release, compute integrity hash.
    final Release pantheonRelease =
        Release.builder()
            .version(pantheonVersion)
            .releaseDistributionPath(pantheonReleasePath)
            .build();
    // Declare maintainers users.
    final AiakosMaintainer maintainer1 =
        AiakosMaintainer.of(
            AiakosConfiguration.builder()
                .accountAddress("0xa00b1a651e6123d55a59d043c63f720414fd1d08")
                .privateKey("0xefa263a31bd0c9420caafe4be3feb9e0c663584e6edb02bf0f723e7830a77a6f")
                .aiakosContractAddress(owner.getDeployedContractAddress())
                .build());
    final AiakosMaintainer maintainer2 =
        AiakosMaintainer.of(
            AiakosConfiguration.builder()
                .accountAddress("0xf88858b8246b4c41223354db2caca84109824f86")
                .privateKey("0x927a407efb0aa2c48dc9f152f64db22b2e7fe50235471d0745f34850ab8059ff")
                .aiakosContractAddress(owner.getDeployedContractAddress())
                .build());

    // Owner: add maintainers.
    owner.addMaintainer(maintainer1.getConfiguration().getAccountAddress());
    owner.addMaintainer(maintainer2.getConfiguration().getAccountAddress());
    // Maintainers: grant approvals.
    maintainer1.deployRelease(pantheonRelease);
    // Get release info.
    final ReleaseInfo releaseInfoAfterFirstApproval = owner.getReleaseInfo(pantheonRelease);
    log.info("Release info: {}", releaseInfoAfterFirstApproval);
    maintainer2.deployRelease(pantheonRelease);
    // Get release info.
    final ReleaseInfo releaseInfoAfterSecondApproval = owner.getReleaseInfo(pantheonRelease);
    log.info("Release info: {}", releaseInfoAfterSecondApproval);
    // new Application().run();
  }

  /*private void run() throws Exception {
    final BigInteger weiAmount =
        Convert.toWei(BigDecimal.valueOf(0.1), Convert.Unit.ETHER).toBigInteger();
    final Web3j web3j = Web3j.build(new HttpService("http://localhost:8545/"));
    log.info(
        "Connected to Ethereum client version: "
            + web3j.web3ClientVersion().send().getWeb3ClientVersion());

    final String maintainer1Address = "0xa00b1a651e6123d55a59d043c63f720414fd1d08";
    final String maintainer2Address = "0xf88858b8246b4c41223354db2caca84109824f86";
    final Credentials ownerCredentials =
        Credentials.create("0x5f32b2d51813403414c89b0f582d5e1eab560f67803201c993c16af1e462eaae");
    final Credentials maintainer1Credentials =
        Credentials.create("0xefa263a31bd0c9420caafe4be3feb9e0c663584e6edb02bf0f723e7830a77a6f");
    final Credentials maintainer2Credentials =
        Credentials.create("0x927a407efb0aa2c48dc9f152f64db22b2e7fe50235471d0745f34850ab8059ff");

    log.info("Contract owner credentials loaded");
    final ContractGasProvider contractGasProvider = new DefaultGasProvider();
    Aiakos ownerContract =
        Aiakos.deploy(web3j, ownerCredentials, contractGasProvider, REQUIRED_NUMBER_OF_MAINTAINERS)
            .send();
    log.info("Aiakos ownerContract deployed at: {}", ownerContract.getContractAddress());
    Boolean amIMaintainer = ownerContract.amIMaintainer().send();
    log.info("Owner is maintainer: {}", amIMaintainer);
    ownerContract.addMaintainer(maintainer1Address, weiAmount).send();
    ownerContract.addMaintainer(maintainer2Address, weiAmount).send();

    final String releaseVersion = "1.0.0";
    final byte[] releaseHash = new byte[32];
    ThreadLocalRandom.current().nextBytes(releaseHash);
    log.info("Release hash: {}", encodeHexString(releaseHash));
    byte[] corruptedHash = Arrays.copyOf(releaseHash, releaseHash.length);
    corruptedHash[0] = (byte) 0xFF;
    Aiakos maintainer1AiakosContract =
        Aiakos.load(
            ownerContract.getContractAddress(), web3j, maintainer1Credentials, contractGasProvider);
    maintainer1AiakosContract.deployRelease(releaseVersion, releaseHash, weiAmount).send();
    Boolean isMaintainer1Maintainer = maintainer1AiakosContract.amIMaintainer().send();
    log.info("Maintainer 1 is maintainer: {}", isMaintainer1Maintainer);
    logReleaseInfo(maintainer1AiakosContract.getReleaseInfo(releaseVersion).send());
    Aiakos maintainer2AiakosContract =
        Aiakos.load(
            ownerContract.getContractAddress(), web3j, maintainer2Credentials, contractGasProvider);
    maintainer2AiakosContract.deployRelease(releaseVersion, releaseHash, weiAmount).send();
    logReleaseInfo(maintainer2AiakosContract.getReleaseInfo(releaseVersion).send());
    Boolean isReleaseIntegrityOk = ownerContract.checkRelease(releaseVersion, releaseHash).send();
    log.info("Release integrity check passed: {}", isReleaseIntegrityOk);
    try {
      ownerContract.checkRelease(releaseVersion, corruptedHash).send();
    } catch (ContractCallException e) {
      log.error("Error occurred during integrity check.", e);
    }
  }

  private void logReleaseInfo(Tuple4<String, byte[], Boolean, Boolean> releaseInfo) {
    log.info(
        "Release info: version: {}, hash: {}, initialized: {}, approved: {}",
        releaseInfo.getValue1(),
        encodeHexString(releaseInfo.getValue2()),
        releaseInfo.getValue3(),
        releaseInfo.getValue4());
  }*/
}

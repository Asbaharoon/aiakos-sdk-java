/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tech.pegasys.aiakos.cli;

import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import picocli.CommandLine;
import tech.pegasys.aiakos.config.AiakosConfiguration;
import tech.pegasys.aiakos.roles.AiakosMaintainer;
import tech.pegasys.aiakos.roles.AiakosOwner;
import tech.pegasys.aiakos.roles.Role;

import static picocli.CommandLine.Command;
import static picocli.CommandLine.Option;
import static picocli.CommandLine.RunLast;

@Command(
    description = "This command runs the Aiakos CLI application.",
    abbreviateSynopsis = true,
    name = "pantheon",
    mixinStandardHelpOptions = true,
    versionProvider = VersionProvider.class,
    header = "Usage:",
    synopsisHeading = "%n",
    descriptionHeading = "%nDescription:%n%n",
    optionListHeading = "%nOptions:%n",
    footerHeading = "%n",
    footer = "Aiakos is licensed under the Apache License 2.0",
    subcommands = {ReleaseInfoCmd.class, ReleaseCmd.class})
@Getter
public class AiakosCommand implements Runnable {
  private static final Logger log = LoggerFactory.getLogger(AiakosCommand.class);

  @Option(
      names = {"--role"},
      arity = "1")
  private final Role role = null;

  @Option(
      names = {"--contract-address"},
      arity = "1")
  private String contractAddress;

  @Option(
      names = {"--account-address"},
      arity = "1")
  private String accountAddress;

  @Option(
      names = {"--private-key"},
      arity = "1")
  private String privateKey;

  public static void main(String[] args) {
    new CommandLine(new AiakosCommand()).parseWithHandler(new RunLast().andExit(0), args);
  }

  @Override
  public void run() {
    log.info("Running aiakos.");
  }

  public AiakosMaintainer maintainerFromCli() {
    return AiakosMaintainer.of(
        AiakosConfiguration.builder()
            .aiakosContractAddress(this.getContractAddress())
            .accountAddress(this.getAccountAddress())
            .privateKey(this.getPrivateKey())
            .build());
  }

  public AiakosOwner ownerFromCli() throws Exception {
    return AiakosOwner.of(
        AiakosConfiguration.builder()
            .aiakosContractAddress(this.getContractAddress())
            .accountAddress(this.getAccountAddress())
            .privateKey(this.getPrivateKey())
            .build(),
        2);
  }
}
